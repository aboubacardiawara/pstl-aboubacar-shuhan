digraph RUAST {
  node [shape=box];
  "Variant" [label="Variant", color="#ffffb3"];
  "Variant" -> "About>JPanel";
  "About>JPanel" [label="About>JPanel", color="#ffffb3"];
  "About>JPanel" -> "serialVersionUID=1";
  "serialVersionUID=1" [label="serialVersionUID=1", color="#ffffb3"];
  "About>JPanel" -> "public-About()";
  "public-About()" [label="public-About()", color="#ffffb3"];
  "public-About()" -> "JLabel label1=new JLabel(new ImageIcon(this.getClass().getResource(\"images/java.gif\")));
";
  "JLabel label1=new JLabel(new ImageIcon(this.getClass().getResource(\"images/java.gif\")));
" [label="JLabel label1=new JLabel(new ImageIcon(this.getClass().getResource(\"images/java.gif\")));
", color="#ffffb3"];
  "public-About()" -> "this.add(label1);
";
  "this.add(label1);
" [label="this.add(label1);
", color="#ffffb3"];
  "public-About()" -> "JLabel label2=new JLabel(\"<html><li>JAVA� Notepad</li><li><p>Ver# 2.0</li>\" + \"<li><p>Coded by: Salah Al-Thubaiti</li><li><p>KFUPM, CS</li><li>\" + \"<p>CopyRight� 2001-2002</li></html>\");
";
  "JLabel label2=new JLabel(\"<html><li>JAVA� Notepad</li><li><p>Ver# 2.0</li>\" + \"<li><p>Coded by: Salah Al-Thubaiti</li><li><p>KFUPM, CS</li><li>\" + \"<p>CopyRight� 2001-2002</li></html>\");
" [label="JLabel label2=new JLabel(\"<html><li>JAVA� Notepad</li><li><p>Ver# 2.0</li>\" + \"<li><p>Coded by: Salah Al-Thubaiti</li><li><p>KFUPM, CS</li><li>\" + \"<p>CopyRight� 2001-2002</li></html>\");
", color="#ffffb3"];
  "public-About()" -> "this.add(label2);
";
  "this.add(label2);
" [label="this.add(label2);
", color="#ffffb3"];
  "Variant" -> "Actions>Object";
  "Actions>Object" [label="Actions>Object", color="#ffffb3"];
  "Actions>Object" -> "returnVal";
  "returnVal" [label="returnVal", color="#ffffb3"];
  "Actions>Object" -> "option";
  "option" [label="option", color="#ffffb3"];
  "Actions>Object" -> "fileContent=null";
  "fileContent=null" [label="fileContent=null", color="#ffffb3"];
  "Actions>Object" -> "fileName=null";
  "fileName=null" [label="fileName=null", color="#ffffb3"];
  "Actions>Object" -> "jfc=new JFileChooser(\".\")";
  "jfc=new JFileChooser(\".\")" [label="jfc=new JFileChooser(\".\")", color="#ffffb3"];
  "Actions>Object" -> "filter=new ExampleFileFilter()";
  "filter=new ExampleFileFilter()" [label="filter=new ExampleFileFilter()", color="#ffffb3"];
  "Actions>Object" -> "n";
  "n" [label="n", color="#ffffb3"];
  "Actions>Object" -> "font=new Fonts()";
  "font=new Fonts()" [label="font=new Fonts()", color="#ffffb3"];
  "Actions>Object" -> "public-Actions(Notepad)";
  "public-Actions(Notepad)" [label="public-Actions(Notepad)", color="#ffffb3"];
  "public-Actions(Notepad)" -> "this.n=n;
";
  "this.n=n;
" [label="this.n=n;
", color="#ffffb3"];
  "Actions>Object" -> "public-void-neW()";
  "public-void-neW()" [label="public-void-neW()", color="#ffffb3"];
  "public-void-neW()" -> "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
}
 else {
  n.getTextArea().setText(\"\");
}
";
  "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
}
 else {
  n.getTextArea().setText(\"\");
}
" [label="if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      n.getTextArea().setText(\"\");
    }
    if (option == 1) {
      n.getTextArea().setText(\"\");
    }
  }
}
 else {
  n.getTextArea().setText(\"\");
}
", color="#ffffb3"];
  "public-void-neW()" -> "n.setTitle(\"Notepad\");
";
  "n.setTitle(\"Notepad\");
" [label="n.setTitle(\"Notepad\");
", color="#ffffb3"];
  "Actions>Object" -> "public-void-opeN()";
  "public-void-opeN()" [label="public-void-opeN()", color="#ffffb3"];
  "public-void-opeN()" -> "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      open();
    }
    if (option == 1) {
      open();
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      open();
    }
    if (option == 1) {
      open();
    }
  }
}
 else {
  open();
}
";
  "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      open();
    }
    if (option == 1) {
      open();
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      open();
    }
    if (option == 1) {
      open();
    }
  }
}
 else {
  open();
}
" [label="if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      open();
    }
    if (option == 1) {
      open();
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      open();
    }
    if (option == 1) {
      open();
    }
  }
}
 else {
  open();
}
", color="#ffffb3"];
  "Actions>Object" -> "public-void-savE()";
  "public-void-savE()" [label="public-void-savE()", color="#ffffb3"];
  "public-void-savE()" -> "if (fileName == null) {
  saveAs();
}
 else {
  save();
}
";
  "if (fileName == null) {
  saveAs();
}
 else {
  save();
}
" [label="if (fileName == null) {
  saveAs();
}
 else {
  save();
}
", color="#ffffb3"];
  "Actions>Object" -> "public-void-prinT()";
  "public-void-prinT()" [label="public-void-prinT()", color="#ffffb3"];
  "public-void-prinT()" -> "Print.printComponent(n.getTextArea());
";
  "Print.printComponent(n.getTextArea());
" [label="Print.printComponent(n.getTextArea());
", color="#ffffb3"];
  "Actions>Object" -> "public-void-exiT()";
  "public-void-exiT()" [label="public-void-exiT()", color="#ffffb3"];
  "public-void-exiT()" -> "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
}
 else {
  System.exit(0);
}
";
  "if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
}
 else {
  System.exit(0);
}
" [label="if (!n.getTextArea().getText().equals(\"\") && !n.getTextArea().getText().equals(fileContent)) {
  if (fileName == null) {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      saveAs();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
 else {
    option=JOptionPane.showConfirmDialog(null,\"Do you want to save the changes ??\");
    if (option == 0) {
      save();
      System.exit(0);
    }
    if (option == 1) {
      System.exit(0);
    }
  }
}
 else {
  System.exit(0);
}
", color="#ffffb3"];
  "Actions>Object" -> "public-void-selectALL()";
  "public-void-selectALL()" [label="public-void-selectALL()", color="#ffffb3"];
  "public-void-selectALL()" -> "n.getTextArea().selectAll();
";
  "n.getTextArea().selectAll();
" [label="n.getTextArea().selectAll();
", color="#ffffb3"];
  "Actions>Object" -> "public-void-lineWraP()";
  "public-void-lineWraP()" [label="public-void-lineWraP()", color="#ffffb3"];
  "public-void-lineWraP()" -> "if (n.getLineWrap().isSelected()) {
  n.getTextArea().setLineWrap(true);
  n.getTextArea().setWrapStyleWord(true);
}
 else {
  n.getTextArea().setLineWrap(false);
  n.getTextArea().setWrapStyleWord(false);
}
";
  "if (n.getLineWrap().isSelected()) {
  n.getTextArea().setLineWrap(true);
  n.getTextArea().setWrapStyleWord(true);
}
 else {
  n.getTextArea().setLineWrap(false);
  n.getTextArea().setWrapStyleWord(false);
}
" [label="if (n.getLineWrap().isSelected()) {
  n.getTextArea().setLineWrap(true);
  n.getTextArea().setWrapStyleWord(true);
}
 else {
  n.getTextArea().setLineWrap(false);
  n.getTextArea().setWrapStyleWord(false);
}
", color="#ffffb3"];
  "Actions>Object" -> "public-void-fonT()";
  "public-void-fonT()" [label="public-void-fonT()", color="#ffffb3"];
  "public-void-fonT()" -> "font.setVisible(true);
";
  "font.setVisible(true);
" [label="font.setVisible(true);
", color="#ffffb3"];
  "public-void-fonT()" -> "font.pack();
";
  "font.pack();
" [label="font.pack();
", color="#ffffb3"];
  "public-void-fonT()" -> "font.getOkjb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    n.getTextArea().setFont(font.font());
    font.setVisible(false);
  }
}
);
";
  "font.getOkjb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    n.getTextArea().setFont(font.font());
    font.setVisible(false);
  }
}
);
" [label="font.getOkjb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    n.getTextArea().setFont(font.font());
    font.setVisible(false);
  }
}
);
", color="#ffffb3"];
  "public-void-fonT()" -> "font.getCajb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    font.setVisible(false);
  }
}
);
";
  "font.getCajb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    font.setVisible(false);
  }
}
);
" [label="font.getCajb().addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    font.setVisible(false);
  }
}
);
", color="#ffffb3"];
  "Actions>Object" -> "public-void-abouT()";
  "public-void-abouT()" [label="public-void-abouT()", color="#ffffb3"];
  "public-void-abouT()" -> "JOptionPane.showMessageDialog(null,new About(),\"About Notepad\",JOptionPane.PLAIN_MESSAGE);
";
  "JOptionPane.showMessageDialog(null,new About(),\"About Notepad\",JOptionPane.PLAIN_MESSAGE);
" [label="JOptionPane.showMessageDialog(null,new About(),\"About Notepad\",JOptionPane.PLAIN_MESSAGE);
", color="#ffffb3"];
  "Actions>Object" -> "public-void-open()";
  "public-void-open()" [label="public-void-open()", color="#ffffb3"];
  "public-void-open()" -> "filter.addExtension(\"txt\");
";
  "filter.addExtension(\"txt\");
" [label="filter.addExtension(\"txt\");
", color="#ffffb3"];
  "public-void-open()" -> "filter.setDescription(\"TXT Documents\");
";
  "filter.setDescription(\"TXT Documents\");
" [label="filter.setDescription(\"TXT Documents\");
", color="#ffffb3"];
  "public-void-open()" -> "jfc.setFileFilter(filter);
";
  "jfc.setFileFilter(filter);
" [label="jfc.setFileFilter(filter);
", color="#ffffb3"];
  "public-void-open()" -> "returnVal=jfc.showOpenDialog(n);
";
  "returnVal=jfc.showOpenDialog(n);
" [label="returnVal=jfc.showOpenDialog(n);
", color="#ffffb3"];
  "public-void-open()" -> "if (returnVal == JFileChooser.APPROVE_OPTION) {
  n.getTextArea().setText(null);
  try {
    fileName=jfc.getSelectedFile().getPath();
    Reader in=new FileReader(jfc.getSelectedFile());
    char[] buff=new char[100000];
    int nch;
    while ((nch=in.read(buff,0,buff.length)) != -1)     n.getTextArea().append(new String(buff,0,nch));
    fileContent=n.getTextArea().getText();
  }
 catch (  FileNotFoundException x) {
  }
catch (  IOException ioe) {
    System.err.println(\"I/O Error on Open\");
  }
}
";
  "if (returnVal == JFileChooser.APPROVE_OPTION) {
  n.getTextArea().setText(null);
  try {
    fileName=jfc.getSelectedFile().getPath();
    Reader in=new FileReader(jfc.getSelectedFile());
    char[] buff=new char[100000];
    int nch;
    while ((nch=in.read(buff,0,buff.length)) != -1)     n.getTextArea().append(new String(buff,0,nch));
    fileContent=n.getTextArea().getText();
  }
 catch (  FileNotFoundException x) {
  }
catch (  IOException ioe) {
    System.err.println(\"I/O Error on Open\");
  }
}
" [label="if (returnVal == JFileChooser.APPROVE_OPTION) {
  n.getTextArea().setText(null);
  try {
    fileName=jfc.getSelectedFile().getPath();
    Reader in=new FileReader(jfc.getSelectedFile());
    char[] buff=new char[100000];
    int nch;
    while ((nch=in.read(buff,0,buff.length)) != -1)     n.getTextArea().append(new String(buff,0,nch));
    fileContent=n.getTextArea().getText();
  }
 catch (  FileNotFoundException x) {
  }
catch (  IOException ioe) {
    System.err.println(\"I/O Error on Open\");
  }
}
", color="#ffffb3"];
  "public-void-open()" -> "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
";
  "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
" [label="n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
", color="#ffffb3"];
  "Actions>Object" -> "public-void-save()";
  "public-void-save()" [label="public-void-save()", color="#ffffb3"];
  "public-void-save()" -> "try {
  PrintWriter fout=new PrintWriter(new FileWriter(jfc.getSelectedFile()));
  fileContent=n.getTextArea().getText();
  StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
  while (st.hasMoreTokens()) {
    fout.println(st.nextToken());
  }
  fout.close();
}
 catch (IOException ioe) {
  System.err.println(\"I/O Error on Save\");
}
";
  "try {
  PrintWriter fout=new PrintWriter(new FileWriter(jfc.getSelectedFile()));
  fileContent=n.getTextArea().getText();
  StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
  while (st.hasMoreTokens()) {
    fout.println(st.nextToken());
  }
  fout.close();
}
 catch (IOException ioe) {
  System.err.println(\"I/O Error on Save\");
}
" [label="try {
  PrintWriter fout=new PrintWriter(new FileWriter(jfc.getSelectedFile()));
  fileContent=n.getTextArea().getText();
  StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
  while (st.hasMoreTokens()) {
    fout.println(st.nextToken());
  }
  fout.close();
}
 catch (IOException ioe) {
  System.err.println(\"I/O Error on Save\");
}
", color="#ffffb3"];
  "public-void-save()" -> "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
";
  "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
" [label="n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
", color="#ffffb3"];
  "Actions>Object" -> "public-void-saveAs()";
  "public-void-saveAs()" [label="public-void-saveAs()", color="#ffffb3"];
  "public-void-saveAs()" -> "filter.addExtension(\"txt\");
";
  "filter.addExtension(\"txt\");
" [label="filter.addExtension(\"txt\");
", color="#ffffb3"];
  "public-void-saveAs()" -> "filter.setDescription(\"TXT Documents\");
";
  "filter.setDescription(\"TXT Documents\");
" [label="filter.setDescription(\"TXT Documents\");
", color="#ffffb3"];
  "public-void-saveAs()" -> "jfc.setFileFilter(filter);
";
  "jfc.setFileFilter(filter);
" [label="jfc.setFileFilter(filter);
", color="#ffffb3"];
  "public-void-saveAs()" -> "returnVal=jfc.showSaveDialog(n);
";
  "returnVal=jfc.showSaveDialog(n);
" [label="returnVal=jfc.showSaveDialog(n);
", color="#ffffb3"];
  "public-void-saveAs()" -> "if (returnVal == JFileChooser.APPROVE_OPTION) {
  PrintWriter fout=null;
  try {
    fout=new PrintWriter(new FileWriter(jfc.getSelectedFile() + \".txt\"));
    fileContent=n.getTextArea().getText();
    fileName=jfc.getSelectedFile().getPath();
    StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
    while (st.hasMoreTokens()) {
      fout.println(st.nextToken());
    }
    fout.close();
  }
 catch (  IOException ioe) {
    System.err.println(\"I/O Error on Save\");
  }
}
";
  "if (returnVal == JFileChooser.APPROVE_OPTION) {
  PrintWriter fout=null;
  try {
    fout=new PrintWriter(new FileWriter(jfc.getSelectedFile() + \".txt\"));
    fileContent=n.getTextArea().getText();
    fileName=jfc.getSelectedFile().getPath();
    StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
    while (st.hasMoreTokens()) {
      fout.println(st.nextToken());
    }
    fout.close();
  }
 catch (  IOException ioe) {
    System.err.println(\"I/O Error on Save\");
  }
}
" [label="if (returnVal == JFileChooser.APPROVE_OPTION) {
  PrintWriter fout=null;
  try {
    fout=new PrintWriter(new FileWriter(jfc.getSelectedFile() + \".txt\"));
    fileContent=n.getTextArea().getText();
    fileName=jfc.getSelectedFile().getPath();
    StringTokenizer st=new StringTokenizer(fileContent,System.getProperty(\"line.separator\"));
    while (st.hasMoreTokens()) {
      fout.println(st.nextToken());
    }
    fout.close();
  }
 catch (  IOException ioe) {
    System.err.println(\"I/O Error on Save\");
  }
}
", color="#ffffb3"];
  "public-void-saveAs()" -> "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
";
  "n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
" [label="n.setTitle(jfc.getSelectedFile().getName() + \" - JAVA� Notepad\");
", color="#ffffb3"];
  "Actions>Object" -> "public-void-cuT()";
  "public-void-cuT()" [label="public-void-cuT()", color="#ffffb3"];
  "public-void-cuT()" -> "n.getTextArea().cut();
";
  "n.getTextArea().cut();
" [label="n.getTextArea().cut();
", color="#ffffb3"];
  "Actions>Object" -> "public-void-copY()";
  "public-void-copY()" [label="public-void-copY()", color="#ffffb3"];
  "public-void-copY()" -> "n.getTextArea().copy();
";
  "n.getTextArea().copy();
" [label="n.getTextArea().copy();
", color="#ffffb3"];
  "Actions>Object" -> "public-void-pastE()";
  "public-void-pastE()" [label="public-void-pastE()", color="#ffffb3"];
  "public-void-pastE()" -> "n.getTextArea().paste();
";
  "n.getTextArea().paste();
" [label="n.getTextArea().paste();
", color="#ffffb3"];
  "Actions>Object" -> "findword";
  "findword" [label="findword", color="#bebada"];
  "Actions>Object" -> "public-void-finD()";
  "public-void-finD()" [label="public-void-finD()", color="#bebada"];
  "public-void-finD()" -> "try {
  findword=JOptionPane.showInputDialog(\"Type the word to find\");
  while (n.getTextArea().getText().indexOf(findword) == -1) {
    JOptionPane.showMessageDialog(null,\"Word not found!\",\"No match\",JOptionPane.WARNING_MESSAGE);
    findword=JOptionPane.showInputDialog(\"Type the word to find\");
  }
  n.getTextArea().select(n.getTextArea().getText().indexOf(findword),n.getTextArea().getText().indexOf(findword) + findword.length());
}
 catch (Exception ex) {
  JOptionPane.showMessageDialog(null,\"Search canceled\",\"Abourted\",JOptionPane.WARNING_MESSAGE);
}
";
  "try {
  findword=JOptionPane.showInputDialog(\"Type the word to find\");
  while (n.getTextArea().getText().indexOf(findword) == -1) {
    JOptionPane.showMessageDialog(null,\"Word not found!\",\"No match\",JOptionPane.WARNING_MESSAGE);
    findword=JOptionPane.showInputDialog(\"Type the word to find\");
  }
  n.getTextArea().select(n.getTextArea().getText().indexOf(findword),n.getTextArea().getText().indexOf(findword) + findword.length());
}
 catch (Exception ex) {
  JOptionPane.showMessageDialog(null,\"Search canceled\",\"Abourted\",JOptionPane.WARNING_MESSAGE);
}
" [label="try {
  findword=JOptionPane.showInputDialog(\"Type the word to find\");
  while (n.getTextArea().getText().indexOf(findword) == -1) {
    JOptionPane.showMessageDialog(null,\"Word not found!\",\"No match\",JOptionPane.WARNING_MESSAGE);
    findword=JOptionPane.showInputDialog(\"Type the word to find\");
  }
  n.getTextArea().select(n.getTextArea().getText().indexOf(findword),n.getTextArea().getText().indexOf(findword) + findword.length());
}
 catch (Exception ex) {
  JOptionPane.showMessageDialog(null,\"Search canceled\",\"Abourted\",JOptionPane.WARNING_MESSAGE);
}
", color="#bebada"];
  "Actions>Object" -> "public-void-findNexT()";
  "public-void-findNexT()" [label="public-void-findNexT()", color="#bebada"];
  "public-void-findNexT()" -> "n.getTextArea().select(n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1),n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1));
";
  "n.getTextArea().select(n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1),n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1));
" [label="n.getTextArea().select(n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1),n.getTextArea().getText().indexOf(findword,(int)n.getTextArea().getText().indexOf(findword) + 1));
", color="#bebada"];
  "Variant" -> "Center>Object";
  "Center>Object" [label="Center>Object", color="#ffffb3"];
  "Center>Object" -> "n";
  "n" [label="n", color="#ffffb3"];
  "Center>Object" -> "f";
  "f" [label="f", color="#ffffb3"];
  "Center>Object" -> "public-Center(Notepad)";
  "public-Center(Notepad)" [label="public-Center(Notepad)", color="#ffffb3"];
  "public-Center(Notepad)" -> "this.n=n;
";
  "this.n=n;
" [label="this.n=n;
", color="#ffffb3"];
  "Center>Object" -> "public-Center(Fonts)";
  "public-Center(Fonts)" [label="public-Center(Fonts)", color="#ffffb3"];
  "public-Center(Fonts)" -> "this.f=f;
";
  "this.f=f;
" [label="this.f=f;
", color="#ffffb3"];
  "Center>Object" -> "public-void-nCenter()";
  "public-void-nCenter()" [label="public-void-nCenter()", color="#ffffb3"];
  "public-void-nCenter()" -> "Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
";
  "Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
" [label="Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
", color="#ffffb3"];
  "public-void-nCenter()" -> "n.setLocation((screenSize.width - n.getWidth()) / 2,(screenSize.height - n.getHeight()) / 2);
";
  "n.setLocation((screenSize.width - n.getWidth()) / 2,(screenSize.height - n.getHeight()) / 2);
" [label="n.setLocation((screenSize.width - n.getWidth()) / 2,(screenSize.height - n.getHeight()) / 2);
", color="#ffffb3"];
  "Center>Object" -> "public-void-fCenter()";
  "public-void-fCenter()" [label="public-void-fCenter()", color="#ffffb3"];
  "public-void-fCenter()" -> "Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
";
  "Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
" [label="Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
", color="#ffffb3"];
  "public-void-fCenter()" -> "f.setLocation((screenSize.width - f.getWidth()) / 2,(screenSize.height - f.getHeight()) / 2);
";
  "f.setLocation((screenSize.width - f.getWidth()) / 2,(screenSize.height - f.getHeight()) / 2);
" [label="f.setLocation((screenSize.width - f.getWidth()) / 2,(screenSize.height - f.getHeight()) / 2);
", color="#ffffb3"];
  "Variant" -> "ExampleFileFilter>FileFilter";
  "ExampleFileFilter>FileFilter" [label="ExampleFileFilter>FileFilter", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "filters=null";
  "filters=null" [label="filters=null", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "description=null";
  "description=null" [label="description=null", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "fullDescription=null";
  "fullDescription=null" [label="fullDescription=null", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "useExtensionsInDescription=true";
  "useExtensionsInDescription=true" [label="useExtensionsInDescription=true", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-ExampleFileFilter()";
  "public-ExampleFileFilter()" [label="public-ExampleFileFilter()", color="#ffffb3"];
  "public-ExampleFileFilter()" -> "this.filters=new Hashtable<String,ExampleFileFilter>();
";
  "this.filters=new Hashtable<String,ExampleFileFilter>();
" [label="this.filters=new Hashtable<String,ExampleFileFilter>();
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-ExampleFileFilter(String)";
  "public-ExampleFileFilter(String)" [label="public-ExampleFileFilter(String)", color="#ffffb3"];
  "public-ExampleFileFilter(String)" -> "this(extension,null);
";
  "this(extension,null);
" [label="this(extension,null);
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-ExampleFileFilter(String,String)";
  "public-ExampleFileFilter(String,String)" [label="public-ExampleFileFilter(String,String)", color="#ffffb3"];
  "public-ExampleFileFilter(String,String)" -> "this();
";
  "this();
" [label="this();
", color="#ffffb3"];
  "public-ExampleFileFilter(String,String)" -> "if (extension != null) addExtension(extension);
";
  "if (extension != null) addExtension(extension);
" [label="if (extension != null) addExtension(extension);
", color="#ffffb3"];
  "public-ExampleFileFilter(String,String)" -> "if (description != null) setDescription(description);
";
  "if (description != null) setDescription(description);
" [label="if (description != null) setDescription(description);
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-ExampleFileFilter(String[])";
  "public-ExampleFileFilter(String[])" [label="public-ExampleFileFilter(String[])", color="#ffffb3"];
  "public-ExampleFileFilter(String[])" -> "this(filters,null);
";
  "this(filters,null);
" [label="this(filters,null);
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-ExampleFileFilter(String[],String)";
  "public-ExampleFileFilter(String[],String)" [label="public-ExampleFileFilter(String[],String)", color="#ffffb3"];
  "public-ExampleFileFilter(String[],String)" -> "this();
";
  "this();
" [label="this();
", color="#ffffb3"];
  "public-ExampleFileFilter(String[],String)" -> "for (int i=0; i < filters.length; i++) {
  addExtension(filters[i]);
}
";
  "for (int i=0; i < filters.length; i++) {
  addExtension(filters[i]);
}
" [label="for (int i=0; i < filters.length; i++) {
  addExtension(filters[i]);
}
", color="#ffffb3"];
  "public-ExampleFileFilter(String[],String)" -> "if (description != null) setDescription(description);
";
  "if (description != null) setDescription(description);
" [label="if (description != null) setDescription(description);
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-boolean-accept(File)";
  "public-boolean-accept(File)" [label="public-boolean-accept(File)", color="#ffffb3"];
  "public-boolean-accept(File)" -> "if (f != null) {
  if (f.isDirectory()) {
    return true;
  }
  String extension=getExtension(f);
  if (extension != null && filters.get(getExtension(f)) != null) {
    return true;
  }
  ;
}
";
  "if (f != null) {
  if (f.isDirectory()) {
    return true;
  }
  String extension=getExtension(f);
  if (extension != null && filters.get(getExtension(f)) != null) {
    return true;
  }
  ;
}
" [label="if (f != null) {
  if (f.isDirectory()) {
    return true;
  }
  String extension=getExtension(f);
  if (extension != null && filters.get(getExtension(f)) != null) {
    return true;
  }
  ;
}
", color="#ffffb3"];
  "public-boolean-accept(File)" -> "return false;
";
  "return false;
" [label="return false;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-String-getExtension(File)";
  "public-String-getExtension(File)" [label="public-String-getExtension(File)", color="#ffffb3"];
  "public-String-getExtension(File)" -> "if (f != null) {
  String filename=f.getName();
  int i=filename.lastIndexOf('.');
  if (i > 0 && i < filename.length() - 1) {
    return filename.substring(i + 1).toLowerCase();
  }
  ;
}
";
  "if (f != null) {
  String filename=f.getName();
  int i=filename.lastIndexOf('.');
  if (i > 0 && i < filename.length() - 1) {
    return filename.substring(i + 1).toLowerCase();
  }
  ;
}
" [label="if (f != null) {
  String filename=f.getName();
  int i=filename.lastIndexOf('.');
  if (i > 0 && i < filename.length() - 1) {
    return filename.substring(i + 1).toLowerCase();
  }
  ;
}
", color="#ffffb3"];
  "public-String-getExtension(File)" -> "return null;
";
  "return null;
" [label="return null;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-void-addExtension(String)";
  "public-void-addExtension(String)" [label="public-void-addExtension(String)", color="#ffffb3"];
  "public-void-addExtension(String)" -> "if (filters == null) {
  filters=new Hashtable<String,ExampleFileFilter>(5);
}
";
  "if (filters == null) {
  filters=new Hashtable<String,ExampleFileFilter>(5);
}
" [label="if (filters == null) {
  filters=new Hashtable<String,ExampleFileFilter>(5);
}
", color="#ffffb3"];
  "public-void-addExtension(String)" -> "filters.put(extension.toLowerCase(),this);
";
  "filters.put(extension.toLowerCase(),this);
" [label="filters.put(extension.toLowerCase(),this);
", color="#ffffb3"];
  "public-void-addExtension(String)" -> "fullDescription=null;
";
  "fullDescription=null;
" [label="fullDescription=null;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "@SuppressWarnings(\"rawtypes\")-public-String-getDescription()";
  "@SuppressWarnings(\"rawtypes\")-public-String-getDescription()" [label="@SuppressWarnings(\"rawtypes\")-public-String-getDescription()", color="#ffffb3"];
  "@SuppressWarnings(\"rawtypes\")-public-String-getDescription()" -> "if (fullDescription == null) {
  if (description == null || isExtensionListInDescription()) {
    fullDescription=description == null ? \"(\" : description + \" (\";
    Enumeration extensions=filters.keys();
    if (extensions != null) {
      fullDescription+=\".\" + (String)extensions.nextElement();
      while (extensions.hasMoreElements()) {
        fullDescription+=\", .\" + (String)extensions.nextElement();
      }
    }
    fullDescription+=\")\";
  }
 else {
    fullDescription=description;
  }
}
";
  "if (fullDescription == null) {
  if (description == null || isExtensionListInDescription()) {
    fullDescription=description == null ? \"(\" : description + \" (\";
    Enumeration extensions=filters.keys();
    if (extensions != null) {
      fullDescription+=\".\" + (String)extensions.nextElement();
      while (extensions.hasMoreElements()) {
        fullDescription+=\", .\" + (String)extensions.nextElement();
      }
    }
    fullDescription+=\")\";
  }
 else {
    fullDescription=description;
  }
}
" [label="if (fullDescription == null) {
  if (description == null || isExtensionListInDescription()) {
    fullDescription=description == null ? \"(\" : description + \" (\";
    Enumeration extensions=filters.keys();
    if (extensions != null) {
      fullDescription+=\".\" + (String)extensions.nextElement();
      while (extensions.hasMoreElements()) {
        fullDescription+=\", .\" + (String)extensions.nextElement();
      }
    }
    fullDescription+=\")\";
  }
 else {
    fullDescription=description;
  }
}
", color="#ffffb3"];
  "@SuppressWarnings(\"rawtypes\")-public-String-getDescription()" -> "return fullDescription;
";
  "return fullDescription;
" [label="return fullDescription;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-void-setDescription(String)";
  "public-void-setDescription(String)" [label="public-void-setDescription(String)", color="#ffffb3"];
  "public-void-setDescription(String)" -> "this.description=description;
";
  "this.description=description;
" [label="this.description=description;
", color="#ffffb3"];
  "public-void-setDescription(String)" -> "fullDescription=null;
";
  "fullDescription=null;
" [label="fullDescription=null;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-void-setExtensionListInDescription(boolean)";
  "public-void-setExtensionListInDescription(boolean)" [label="public-void-setExtensionListInDescription(boolean)", color="#ffffb3"];
  "public-void-setExtensionListInDescription(boolean)" -> "useExtensionsInDescription=b;
";
  "useExtensionsInDescription=b;
" [label="useExtensionsInDescription=b;
", color="#ffffb3"];
  "public-void-setExtensionListInDescription(boolean)" -> "fullDescription=null;
";
  "fullDescription=null;
" [label="fullDescription=null;
", color="#ffffb3"];
  "ExampleFileFilter>FileFilter" -> "public-boolean-isExtensionListInDescription()";
  "public-boolean-isExtensionListInDescription()" [label="public-boolean-isExtensionListInDescription()", color="#ffffb3"];
  "public-boolean-isExtensionListInDescription()" -> "return useExtensionsInDescription;
";
  "return useExtensionsInDescription;
" [label="return useExtensionsInDescription;
", color="#ffffb3"];
  "Variant" -> "Fonts>JDialog";
  "Fonts>JDialog" [label="Fonts>JDialog", color="#ffffb3"];
  "Fonts>JDialog" -> "serialVersionUID=1L";
  "serialVersionUID=1L" [label="serialVersionUID=1L", color="#ffffb3"];
  "Fonts>JDialog" -> "center=new Center(this)";
  "center=new Center(this)" [label="center=new Center(this)", color="#ffffb3"];
  "Fonts>JDialog" -> "jp=new JPanel()";
  "jp=new JPanel()" [label="jp=new JPanel()", color="#ffffb3"];
  "Fonts>JDialog" -> "fjl=new JLabel(\"Fonts: \")";
  "fjl=new JLabel(\"Fonts: \")" [label="fjl=new JLabel(\"Fonts: \")", color="#ffffb3"];
  "Fonts>JDialog" -> "fjcb=new JComboBox()";
  "fjcb=new JComboBox()" [label="fjcb=new JComboBox()", color="#ffffb3"];
  "Fonts>JDialog" -> "fonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()";
  "fonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()" [label="fonts[]=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()", color="#ffffb3"];
  "Fonts>JDialog" -> "sjl=new JLabel(\"Sizes: \")";
  "sjl=new JLabel(\"Sizes: \")" [label="sjl=new JLabel(\"Sizes: \")", color="#ffffb3"];
  "Fonts>JDialog" -> "sjcb=new JComboBox()";
  "sjcb=new JComboBox()" [label="sjcb=new JComboBox()", color="#ffffb3"];
  "Fonts>JDialog" -> "sizes[]={\"8\",\"10\",\"12\",\"14\",\"16\",\"18\",\"20\",\"24\",\"28\",\"32\",\"48\",\"72\"}";
  "sizes[]={\"8\",\"10\",\"12\",\"14\",\"16\",\"18\",\"20\",\"24\",\"28\",\"32\",\"48\",\"72\"}" [label="sizes[]={\"8\",\"10\",\"12\",\"14\",\"16\",\"18\",\"20\",\"24\",\"28\",\"32\",\"48\",\"72\"}", color="#ffffb3"];
  "Fonts>JDialog" -> "tjl=new JLabel(\"Types: \")";
  "tjl=new JLabel(\"Types: \")" [label="tjl=new JLabel(\"Types: \")", color="#ffffb3"];
  "Fonts>JDialog" -> "tjcb=new JComboBox()";
  "tjcb=new JComboBox()" [label="tjcb=new JComboBox()", color="#ffffb3"];
  "Fonts>JDialog" -> "types[]={\"Regular\",\"Bold\",\"Italic\",\"Bold Italic\"}";
  "types[]={\"Regular\",\"Bold\",\"Italic\",\"Bold Italic\"}" [label="types[]={\"Regular\",\"Bold\",\"Italic\",\"Bold Italic\"}", color="#ffffb3"];
  "Fonts>JDialog" -> "jjl=new JLabel(\"Preview:\")";
  "jjl=new JLabel(\"Preview:\")" [label="jjl=new JLabel(\"Preview:\")", color="#ffffb3"];
  "Fonts>JDialog" -> "jl=new JLabel(\"AaBaCcDdeEfFgGhHjJ\")";
  "jl=new JLabel(\"AaBaCcDdeEfFgGhHjJ\")" [label="jl=new JLabel(\"AaBaCcDdeEfFgGhHjJ\")", color="#ffffb3"];
  "Fonts>JDialog" -> "okjb=new JButton(\"OK\")";
  "okjb=new JButton(\"OK\")" [label="okjb=new JButton(\"OK\")", color="#ffffb3"];
  "Fonts>JDialog" -> "cajb=new JButton(\"Cancel\")";
  "cajb=new JButton(\"Cancel\")" [label="cajb=new JButton(\"Cancel\")", color="#ffffb3"];
  "Fonts>JDialog" -> "public-JButton-getOkjb()";
  "public-JButton-getOkjb()" [label="public-JButton-getOkjb()", color="#ffffb3"];
  "public-JButton-getOkjb()" -> "return okjb;
";
  "return okjb;
" [label="return okjb;
", color="#ffffb3"];
  "Fonts>JDialog" -> "public-JButton-getCajb()";
  "public-JButton-getCajb()" [label="public-JButton-getCajb()", color="#ffffb3"];
  "public-JButton-getCajb()" -> "return cajb;
";
  "return cajb;
" [label="return cajb;
", color="#ffffb3"];
  "Fonts>JDialog" -> "public-Fonts()";
  "public-Fonts()" [label="public-Fonts()", color="#ffffb3"];
  "public-Fonts()" -> "setTitle(\"Font Dialog\");
";
  "setTitle(\"Font Dialog\");
" [label="setTitle(\"Font Dialog\");
", color="#ffffb3"];
  "public-Fonts()" -> "setResizable(false);
";
  "setResizable(false);
" [label="setResizable(false);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.setLayout(new GridLayout(5,2,1,1));
";
  "jp.setLayout(new GridLayout(5,2,1,1));
" [label="jp.setLayout(new GridLayout(5,2,1,1));
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(fjl);
";
  "jp.add(fjl);
" [label="jp.add(fjl);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(fjcb=new JComboBox(fonts));
";
  "jp.add(fjcb=new JComboBox(fonts));
" [label="jp.add(fjcb=new JComboBox(fonts));
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(sjl);
";
  "jp.add(sjl);
" [label="jp.add(sjl);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(sjcb=new JComboBox(sizes));
";
  "jp.add(sjcb=new JComboBox(sizes));
" [label="jp.add(sjcb=new JComboBox(sizes));
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(tjl);
";
  "jp.add(tjl);
" [label="jp.add(tjl);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(tjcb=new JComboBox(types));
";
  "jp.add(tjcb=new JComboBox(types));
" [label="jp.add(tjcb=new JComboBox(types));
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(jjl);
";
  "jp.add(jjl);
" [label="jp.add(jjl);
", color="#ffffb3"];
  "public-Fonts()" -> "jl.setBorder(BorderFactory.createEtchedBorder());
";
  "jl.setBorder(BorderFactory.createEtchedBorder());
" [label="jl.setBorder(BorderFactory.createEtchedBorder());
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(jl);
";
  "jp.add(jl);
" [label="jp.add(jl);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(okjb);
";
  "jp.add(okjb);
" [label="jp.add(okjb);
", color="#ffffb3"];
  "public-Fonts()" -> "jp.add(cajb);
";
  "jp.add(cajb);
" [label="jp.add(cajb);
", color="#ffffb3"];
  "public-Fonts()" -> "this.getContentPane().add(jp);
";
  "this.getContentPane().add(jp);
" [label="this.getContentPane().add(jp);
", color="#ffffb3"];
  "public-Fonts()" -> "center.fCenter();
";
  "center.fCenter();
" [label="center.fCenter();
", color="#ffffb3"];
  "public-Fonts()" -> "fjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
";
  "fjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
" [label="fjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
", color="#ffffb3"];
  "public-Fonts()" -> "tjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
";
  "tjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
" [label="tjcb.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    jl.setFont(new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),14));
  }
}
);
", color="#ffffb3"];
  "Fonts>JDialog" -> "public-Font-font()";
  "public-Font-font()" [label="public-Font-font()", color="#ffffb3"];
  "public-Font-font()" -> "Font font=new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),Integer.parseInt(String.valueOf(sjcb.getSelectedItem())));
";
  "Font font=new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),Integer.parseInt(String.valueOf(sjcb.getSelectedItem())));
" [label="Font font=new Font(String.valueOf(fjcb.getSelectedItem()),tjcb.getSelectedIndex(),Integer.parseInt(String.valueOf(sjcb.getSelectedItem())));
", color="#ffffb3"];
  "public-Font-font()" -> "return font;
";
  "return font;
" [label="return font;
", color="#ffffb3"];
  "Variant" -> "Notepad>JFrame";
  "Notepad>JFrame" [label="Notepad>JFrame", color="#ffffb3"];
  "Notepad>JFrame" -> "serialVersionUID=1";
  "serialVersionUID=1" [label="serialVersionUID=1", color="#ffffb3"];
  "Notepad>JFrame" -> "actions=new Actions(this)";
  "actions=new Actions(this)" [label="actions=new Actions(this)", color="#ffffb3"];
  "Notepad>JFrame" -> "center=new Center(this)";
  "center=new Center(this)" [label="center=new Center(this)", color="#ffffb3"];
  "Notepad>JFrame" -> "textArea";
  "textArea" [label="textArea", color="#ffffb3"];
  "Notepad>JFrame" -> "Menubar";
  "Menubar" [label="Menubar", color="#ffffb3"];
  "Notepad>JFrame" -> "filE";
  "filE" [label="filE", color="#ffffb3"];
  "Notepad>JFrame" -> "neW";
  "neW" [label="neW", color="#ffffb3"];
  "Notepad>JFrame" -> "lineWraP";
  "lineWraP" [label="lineWraP", color="#ffffb3"];
  "Notepad>JFrame" -> "toolBar";
  "toolBar" [label="toolBar", color="#ffffb3"];
  "Notepad>JFrame" -> "newButton";
  "newButton" [label="newButton", color="#ffffb3"];
  "Notepad>JFrame" -> "public-JCheckBoxMenuItem-getLineWrap()";
  "public-JCheckBoxMenuItem-getLineWrap()" [label="public-JCheckBoxMenuItem-getLineWrap()", color="#ffffb3"];
  "public-JCheckBoxMenuItem-getLineWrap()" -> "return lineWraP;
";
  "return lineWraP;
" [label="return lineWraP;
", color="#ffffb3"];
  "Notepad>JFrame" -> "public-JTextArea-getTextArea()";
  "public-JTextArea-getTextArea()" [label="public-JTextArea-getTextArea()", color="#ffffb3"];
  "public-JTextArea-getTextArea()" -> "return textArea;
";
  "return textArea;
" [label="return textArea;
", color="#ffffb3"];
  "Notepad>JFrame" -> "public-Notepad()";
  "public-Notepad()" [label="public-Notepad()", color="#ffffb3"];
  "public-Notepad()" -> "setTitle(\"Notepad\");
";
  "setTitle(\"Notepad\");
" [label="setTitle(\"Notepad\");
", color="#ffffb3"];
  "public-Notepad()" -> "setSize(800,600);
";
  "setSize(800,600);
" [label="setSize(800,600);
", color="#ffffb3"];
  "public-Notepad()" -> "Container cp=getContentPane();
";
  "Container cp=getContentPane();
" [label="Container cp=getContentPane();
", color="#ffffb3"];
  "public-Notepad()" -> "cp.add(textArea=new JTextArea());
";
  "cp.add(textArea=new JTextArea());
" [label="cp.add(textArea=new JTextArea());
", color="#ffffb3"];
  "public-Notepad()" -> "cp.add(\"North\",toolBar=new JToolBar(\"Tool Bar\"));
";
  "cp.add(\"North\",toolBar=new JToolBar(\"Tool Bar\"));
" [label="cp.add(\"North\",toolBar=new JToolBar(\"Tool Bar\"));
", color="#ffffb3"];
  "public-Notepad()" -> "cp.add(new JScrollPane(textArea));
";
  "cp.add(new JScrollPane(textArea));
" [label="cp.add(new JScrollPane(textArea));
", color="#ffffb3"];
  "public-Notepad()" -> "setJMenuBar(Menubar=new JMenuBar());
";
  "setJMenuBar(Menubar=new JMenuBar());
" [label="setJMenuBar(Menubar=new JMenuBar());
", color="#ffffb3"];
  "public-Notepad()" -> "Menubar.add(filE=new JMenu(\"File\"));
";
  "Menubar.add(filE=new JMenu(\"File\"));
" [label="Menubar.add(filE=new JMenu(\"File\"));
", color="#ffffb3"];
  "public-Notepad()" -> "Menubar.add(ediT=new JMenu(\"Edit\"));
";
  "Menubar.add(ediT=new JMenu(\"Edit\"));
" [label="Menubar.add(ediT=new JMenu(\"Edit\"));
", color="#ffffb3"];
  "public-Notepad()" -> "Menubar.add(vieW=new JMenu(\"View\"));
";
  "Menubar.add(vieW=new JMenu(\"View\"));
" [label="Menubar.add(vieW=new JMenu(\"View\"));
", color="#ffffb3"];
  "public-Notepad()" -> "Menubar.add(formaT=new JMenu(\"Format\"));
";
  "Menubar.add(formaT=new JMenu(\"Format\"));
" [label="Menubar.add(formaT=new JMenu(\"Format\"));
", color="#ffffb3"];
  "public-Notepad()" -> "Menubar.add(helP=new JMenu(\"Help\"));
";
  "Menubar.add(helP=new JMenu(\"Help\"));
" [label="Menubar.add(helP=new JMenu(\"Help\"));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(neW=new JMenuItem(\"New\",new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
";
  "filE.add(neW=new JMenuItem(\"New\",new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
" [label="filE.add(neW=new JMenuItem(\"New\",new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(opeN=new JMenuItem(\"Open\",new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
";
  "filE.add(opeN=new JMenuItem(\"Open\",new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
" [label="filE.add(opeN=new JMenuItem(\"Open\",new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(savE=new JMenuItem(\"Save\",new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
";
  "filE.add(savE=new JMenuItem(\"Save\",new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
" [label="filE.add(savE=new JMenuItem(\"Save\",new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(saveAS=new JMenuItem(\"Save As\",new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
";
  "filE.add(saveAS=new JMenuItem(\"Save As\",new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
" [label="filE.add(saveAS=new JMenuItem(\"Save As\",new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(prinT=new JMenuItem(\"Print\",new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
";
  "filE.add(prinT=new JMenuItem(\"Print\",new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
" [label="filE.add(prinT=new JMenuItem(\"Print\",new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.add(exiT=new JMenuItem(\"Exit\"));
";
  "filE.add(exiT=new JMenuItem(\"Exit\"));
" [label="filE.add(exiT=new JMenuItem(\"Exit\"));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.insertSeparator(4);
";
  "filE.insertSeparator(4);
" [label="filE.insertSeparator(4);
", color="#ffffb3"];
  "public-Notepad()" -> "filE.insertSeparator(6);
";
  "filE.insertSeparator(6);
" [label="filE.insertSeparator(6);
", color="#ffffb3"];
  "public-Notepad()" -> "ediT.add(selectALL=new JMenuItem(\"Select All\"));
";
  "ediT.add(selectALL=new JMenuItem(\"Select All\"));
" [label="ediT.add(selectALL=new JMenuItem(\"Select All\"));
", color="#ffffb3"];
  "public-Notepad()" -> "formaT.add(lineWraP=new JCheckBoxMenuItem(\"Line Wrap\"));
";
  "formaT.add(lineWraP=new JCheckBoxMenuItem(\"Line Wrap\"));
" [label="formaT.add(lineWraP=new JCheckBoxMenuItem(\"Line Wrap\"));
", color="#ffffb3"];
  "public-Notepad()" -> "formaT.add(fonT=new JMenuItem(\"Font\",new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
";
  "formaT.add(fonT=new JMenuItem(\"Font\",new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
" [label="formaT.add(fonT=new JMenuItem(\"Font\",new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "helP.add(abouT=new JMenuItem(\"About Notepad\",new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
";
  "helP.add(abouT=new JMenuItem(\"About Notepad\",new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
" [label="helP.add(abouT=new JMenuItem(\"About Notepad\",new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "filE.setMnemonic('f');
";
  "filE.setMnemonic('f');
" [label="filE.setMnemonic('f');
", color="#ffffb3"];
  "public-Notepad()" -> "ediT.setMnemonic('e');
";
  "ediT.setMnemonic('e');
" [label="ediT.setMnemonic('e');
", color="#ffffb3"];
  "public-Notepad()" -> "vieW.setMnemonic('v');
";
  "vieW.setMnemonic('v');
" [label="vieW.setMnemonic('v');
", color="#ffffb3"];
  "public-Notepad()" -> "formaT.setMnemonic('o');
";
  "formaT.setMnemonic('o');
" [label="formaT.setMnemonic('o');
", color="#ffffb3"];
  "public-Notepad()" -> "helP.setMnemonic('h');
";
  "helP.setMnemonic('h');
" [label="helP.setMnemonic('h');
", color="#ffffb3"];
  "public-Notepad()" -> "neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
";
  "neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
" [label="neW.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.CTRL_MASK));
";
  "opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.CTRL_MASK));
" [label="opeN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK));
";
  "savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK));
" [label="savE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,ActionEvent.CTRL_MASK));
";
  "prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,ActionEvent.CTRL_MASK));
" [label="prinT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,ActionEvent.CTRL_MASK));
";
  "exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,ActionEvent.CTRL_MASK));
" [label="exiT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK));
";
  "selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK));
" [label="selectALL.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(newButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
";
  "toolBar.add(newButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
" [label="toolBar.add(newButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/new.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(openButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
";
  "toolBar.add(openButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
" [label="toolBar.add(openButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/open.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(saveButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
";
  "toolBar.add(saveButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
" [label="toolBar.add(saveButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/save.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(saveAsButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
";
  "toolBar.add(saveAsButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
" [label="toolBar.add(saveAsButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/saveAs.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(printButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
";
  "toolBar.add(printButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
" [label="toolBar.add(printButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/print.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.addSeparator();
";
  "toolBar.addSeparator();
" [label="toolBar.addSeparator();
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(fontButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
";
  "toolBar.add(fontButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
" [label="toolBar.add(fontButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/font.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(aboutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
";
  "toolBar.add(aboutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
" [label="toolBar.add(aboutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/about.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "newButton.setToolTipText(\"New\");
";
  "newButton.setToolTipText(\"New\");
" [label="newButton.setToolTipText(\"New\");
", color="#ffffb3"];
  "public-Notepad()" -> "openButton.setToolTipText(\"Open\");
";
  "openButton.setToolTipText(\"Open\");
" [label="openButton.setToolTipText(\"Open\");
", color="#ffffb3"];
  "public-Notepad()" -> "saveButton.setToolTipText(\"Save\");
";
  "saveButton.setToolTipText(\"Save\");
" [label="saveButton.setToolTipText(\"Save\");
", color="#ffffb3"];
  "public-Notepad()" -> "saveAsButton.setToolTipText(\"Save As\");
";
  "saveAsButton.setToolTipText(\"Save As\");
" [label="saveAsButton.setToolTipText(\"Save As\");
", color="#ffffb3"];
  "public-Notepad()" -> "printButton.setToolTipText(\"Print\");
";
  "printButton.setToolTipText(\"Print\");
" [label="printButton.setToolTipText(\"Print\");
", color="#ffffb3"];
  "public-Notepad()" -> "fontButton.setToolTipText(\"Font\");
";
  "fontButton.setToolTipText(\"Font\");
" [label="fontButton.setToolTipText(\"Font\");
", color="#ffffb3"];
  "public-Notepad()" -> "aboutButton.setToolTipText(\"About Notepad\");
";
  "aboutButton.setToolTipText(\"About Notepad\");
" [label="aboutButton.setToolTipText(\"About Notepad\");
", color="#ffffb3"];
  "public-Notepad()" -> "setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
";
  "setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
" [label="setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
", color="#ffffb3"];
  "public-Notepad()" -> "addWindowListener(new WindowAdapter(){
  public void windowClosing(  WindowEvent e){
    actions.exiT();
  }
}
);
";
  "addWindowListener(new WindowAdapter(){
  public void windowClosing(  WindowEvent e){
    actions.exiT();
  }
}
);
" [label="addWindowListener(new WindowAdapter(){
  public void windowClosing(  WindowEvent e){
    actions.exiT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "neW.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
";
  "neW.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
" [label="neW.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "opeN.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
";
  "opeN.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
" [label="opeN.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "savE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
";
  "savE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
" [label="savE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "saveAS.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
";
  "saveAS.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
" [label="saveAS.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "prinT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
";
  "prinT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
" [label="prinT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "exiT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.exiT();
  }
}
);
";
  "exiT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.exiT();
  }
}
);
" [label="exiT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.exiT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "selectALL.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.selectALL();
  }
}
);
";
  "selectALL.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.selectALL();
  }
}
);
" [label="selectALL.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.selectALL();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "lineWraP.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.lineWraP();
  }
}
);
";
  "lineWraP.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.lineWraP();
  }
}
);
" [label="lineWraP.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.lineWraP();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "fonT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
";
  "fonT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
" [label="fonT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "abouT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
";
  "abouT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
" [label="abouT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "newButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
";
  "newButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
" [label="newButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.neW();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "openButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
";
  "openButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
" [label="openButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.opeN();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "saveButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
";
  "saveButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
" [label="saveButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.savE();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "saveAsButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
";
  "saveAsButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
" [label="saveAsButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.saveAs();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "printButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
";
  "printButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
" [label="printButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.prinT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "fontButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
";
  "fontButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
" [label="fontButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.fonT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "aboutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
";
  "aboutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
" [label="aboutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.abouT();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "textArea.setLineWrap(true);
";
  "textArea.setLineWrap(true);
" [label="textArea.setLineWrap(true);
", color="#ffffb3"];
  "public-Notepad()" -> "textArea.setWrapStyleWord(true);
";
  "textArea.setWrapStyleWord(true);
" [label="textArea.setWrapStyleWord(true);
", color="#ffffb3"];
  "public-Notepad()" -> "center.nCenter();
";
  "center.nCenter();
" [label="center.nCenter();
", color="#ffffb3"];
  "public-Notepad()" -> "show();
";
  "show();
" [label="show();
", color="#ffffb3"];
  "public-Notepad()" -> "ediT.add(copY=new JMenuItem(\"Copy\",new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
";
  "ediT.add(copY=new JMenuItem(\"Copy\",new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
" [label="ediT.add(copY=new JMenuItem(\"Copy\",new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
", color="#fb8072"];
  "public-Notepad()" -> "ediT.add(pastE=new JMenuItem(\"Paste\",new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
";
  "ediT.add(pastE=new JMenuItem(\"Paste\",new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
" [label="ediT.add(pastE=new JMenuItem(\"Paste\",new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));
";
  "copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));
" [label="copY.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));
", color="#fb8072"];
  "public-Notepad()" -> "pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));
";
  "pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));
" [label="pastE.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.add(copyButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
";
  "toolBar.add(copyButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
" [label="toolBar.add(copyButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/copy.gif\"))));
", color="#fb8072"];
  "public-Notepad()" -> "toolBar.add(pasteButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
";
  "toolBar.add(pasteButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
" [label="toolBar.add(pasteButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/paste.gif\"))));
", color="#ffffb3"];
  "public-Notepad()" -> "copyButton.setToolTipText(\"Copy\");
";
  "copyButton.setToolTipText(\"Copy\");
" [label="copyButton.setToolTipText(\"Copy\");
", color="#fb8072"];
  "public-Notepad()" -> "pasteButton.setToolTipText(\"Paste\");
";
  "pasteButton.setToolTipText(\"Paste\");
" [label="pasteButton.setToolTipText(\"Paste\");
", color="#ffffb3"];
  "public-Notepad()" -> "copY.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
";
  "copY.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
" [label="copY.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
", color="#fb8072"];
  "public-Notepad()" -> "pastE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
";
  "pastE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
" [label="pastE.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "copyButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
";
  "copyButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
" [label="copyButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.copY();
  }
}
);
", color="#fb8072"];
  "public-Notepad()" -> "pasteButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
";
  "pasteButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
" [label="pasteButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.pastE();
  }
}
);
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.addSeparator();
";
  "toolBar.addSeparator();
" [label="toolBar.addSeparator();
", color="#ffffb3"];
  "public-Notepad()" -> "toolBar.addSeparator();
";
  "toolBar.addSeparator();
" [label="toolBar.addSeparator();
", color="#ffffb3"];
  "public-Notepad()" -> "textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
  }
}
);
";
  "textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
  }
}
);
" [label="textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
  }
}
);
", color="#80b1d3"];
  "public-Notepad()" -> "ediT.add(cuT=new JMenuItem(\"Cut\",new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
";
  "ediT.add(cuT=new JMenuItem(\"Cut\",new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
" [label="ediT.add(cuT=new JMenuItem(\"Cut\",new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
", color="#fdb462"];
  "public-Notepad()" -> "cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK));
";
  "cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK));
" [label="cuT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK));
", color="#fdb462"];
  "public-Notepad()" -> "toolBar.add(cutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
";
  "toolBar.add(cutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
" [label="toolBar.add(cutButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/cut.gif\"))));
", color="#fdb462"];
  "public-Notepad()" -> "cutButton.setToolTipText(\"Cut\");
";
  "cutButton.setToolTipText(\"Cut\");
" [label="cutButton.setToolTipText(\"Cut\");
", color="#fdb462"];
  "public-Notepad()" -> "cuT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
";
  "cuT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
" [label="cuT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
", color="#fdb462"];
  "public-Notepad()" -> "cutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
";
  "cutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
" [label="cutButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.cuT();
  }
}
);
", color="#fdb462"];
  "public-Notepad()" -> "ediT.add(finD=new JMenuItem(\"Find\",new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
";
  "ediT.add(finD=new JMenuItem(\"Find\",new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
" [label="ediT.add(finD=new JMenuItem(\"Find\",new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
", color="#b3de69"];
  "public-Notepad()" -> "ediT.add(findNexT=new JMenuItem(\"Find Next\"));
";
  "ediT.add(findNexT=new JMenuItem(\"Find Next\"));
" [label="ediT.add(findNexT=new JMenuItem(\"Find Next\"));
", color="#b3de69"];
  "public-Notepad()" -> "finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.CTRL_MASK));
";
  "finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.CTRL_MASK));
" [label="finD.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.CTRL_MASK));
", color="#b3de69"];
  "public-Notepad()" -> "findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3,ActionEvent.CTRL_MASK));
";
  "findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3,ActionEvent.CTRL_MASK));
" [label="findNexT.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3,ActionEvent.CTRL_MASK));
", color="#b3de69"];
  "public-Notepad()" -> "toolBar.add(findButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
";
  "toolBar.add(findButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
" [label="toolBar.add(findButton=new JButton(new ImageIcon(this.getClass().getResource(\"images/find.gif\"))));
", color="#b3de69"];
  "public-Notepad()" -> "findButton.setToolTipText(\"Find\");
";
  "findButton.setToolTipText(\"Find\");
" [label="findButton.setToolTipText(\"Find\");
", color="#b3de69"];
  "public-Notepad()" -> "finD.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
";
  "finD.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
" [label="finD.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
", color="#b3de69"];
  "public-Notepad()" -> "findNexT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.findNexT();
  }
}
);
";
  "findNexT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.findNexT();
  }
}
);
" [label="findNexT.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.findNexT();
  }
}
);
", color="#b3de69"];
  "public-Notepad()" -> "findButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
";
  "findButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
" [label="findButton.addActionListener(new ActionListener(){
  public void actionPerformed(  ActionEvent ae){
    actions.finD();
  }
}
);
", color="#b3de69"];
  "public-Notepad()" -> "ediT.add(undoAction);
";
  "ediT.add(undoAction);
" [label="ediT.add(undoAction);
", color="#fccde5"];
  "public-Notepad()" -> "ediT.add(redoAction);
";
  "ediT.add(redoAction);
" [label="ediT.add(redoAction);
", color="#fccde5"];
  "public-Notepad()" -> "toolBar.add(undoAction);
";
  "toolBar.add(undoAction);
" [label="toolBar.add(undoAction);
", color="#fccde5"];
  "public-Notepad()" -> "toolBar.add(redoAction);
";
  "toolBar.add(redoAction);
" [label="toolBar.add(redoAction);
", color="#fccde5"];
  "public-Notepad()" -> "textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
    undoAction.update();
    redoAction.update();
  }
}
);
";
  "textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
    undoAction.update();
    redoAction.update();
  }
}
);
" [label="textArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
  public void undoableEditHappened(  UndoableEditEvent e){
    undo.addEdit(e.getEdit());
    undoAction.update();
    redoAction.update();
  }
}
);
", color="#fccde5"];
  "Notepad>JFrame" -> "public-static-void-main(String[])";
  "public-static-void-main(String[])" [label="public-static-void-main(String[])", color="#ffffb3"];
  "public-static-void-main(String[])" -> "new Notepad();
";
  "new Notepad();
" [label="new Notepad();
", color="#ffffb3"];
  "Notepad>JFrame" -> "copyButton";
  "copyButton" [label="copyButton", color="#fb8072"];
  "Notepad>JFrame" -> "pasteButton";
  "pasteButton" [label="pasteButton", color="#ffffb3"];
  "Notepad>JFrame" -> "undo=new UndoManager()";
  "undo=new UndoManager()" [label="undo=new UndoManager()", color="#ffffb3"];
  "Notepad>JFrame" -> "cutButton";
  "cutButton" [label="cutButton", color="#fdb462"];
  "Notepad>JFrame" -> "findButton";
  "findButton" [label="findButton", color="#b3de69"];
  "Notepad>JFrame" -> "finD";
  "finD" [label="finD", color="#b3de69"];
  "Notepad>JFrame" -> "undoAction=new UndoAction(this)";
  "undoAction=new UndoAction(this)" [label="undoAction=new UndoAction(this)", color="#fccde5"];
  "Notepad>JFrame" -> "redoAction=new RedoAction(this)";
  "redoAction=new RedoAction(this)" [label="redoAction=new RedoAction(this)", color="#fccde5"];
  "Notepad>JFrame" -> "undoButton";
  "undoButton" [label="undoButton", color="#fccde5"];
  "Variant" -> "Print>Object";
  "Print>Object" [label="Print>Object", color="#ffffb3"];
  "Print>Object" -> "componentToBePrinted";
  "componentToBePrinted" [label="componentToBePrinted", color="#ffffb3"];
  "Print>Object" -> "public-static-void-printComponent(Component)";
  "public-static-void-printComponent(Component)" [label="public-static-void-printComponent(Component)", color="#ffffb3"];
  "public-static-void-printComponent(Component)" -> "new Print(c).print();
";
  "new Print(c).print();
" [label="new Print(c).print();
", color="#ffffb3"];
  "Print>Object" -> "public-Print(Component)";
  "public-Print(Component)" [label="public-Print(Component)", color="#ffffb3"];
  "public-Print(Component)" -> "this.componentToBePrinted=componentToBePrinted;
";
  "this.componentToBePrinted=componentToBePrinted;
" [label="this.componentToBePrinted=componentToBePrinted;
", color="#ffffb3"];
  "Print>Object" -> "public-void-print()";
  "public-void-print()" [label="public-void-print()", color="#ffffb3"];
  "public-void-print()" -> "PrinterJob printJob=PrinterJob.getPrinterJob();
";
  "PrinterJob printJob=PrinterJob.getPrinterJob();
" [label="PrinterJob printJob=PrinterJob.getPrinterJob();
", color="#ffffb3"];
  "public-void-print()" -> "printJob.setPrintable(this);
";
  "printJob.setPrintable(this);
" [label="printJob.setPrintable(this);
", color="#ffffb3"];
  "public-void-print()" -> "if (printJob.printDialog()) try {
  printJob.print();
}
 catch (PrinterException pe) {
  System.out.println(\"Error printing: \" + pe);
}
";
  "if (printJob.printDialog()) try {
  printJob.print();
}
 catch (PrinterException pe) {
  System.out.println(\"Error printing: \" + pe);
}
" [label="if (printJob.printDialog()) try {
  printJob.print();
}
 catch (PrinterException pe) {
  System.out.println(\"Error printing: \" + pe);
}
", color="#ffffb3"];
  "Print>Object" -> "public-int-print(Graphics,PageFormat,int)";
  "public-int-print(Graphics,PageFormat,int)" [label="public-int-print(Graphics,PageFormat,int)", color="#ffffb3"];
  "public-int-print(Graphics,PageFormat,int)" -> "if (pageIndex > 0) {
  return (NO_SUCH_PAGE);
}
 else {
  Graphics2D g2d=(Graphics2D)g;
  g2d.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
  disableDoubleBuffering(componentToBePrinted);
  componentToBePrinted.paint(g2d);
  enableDoubleBuffering(componentToBePrinted);
  return (PAGE_EXISTS);
}
";
  "if (pageIndex > 0) {
  return (NO_SUCH_PAGE);
}
 else {
  Graphics2D g2d=(Graphics2D)g;
  g2d.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
  disableDoubleBuffering(componentToBePrinted);
  componentToBePrinted.paint(g2d);
  enableDoubleBuffering(componentToBePrinted);
  return (PAGE_EXISTS);
}
" [label="if (pageIndex > 0) {
  return (NO_SUCH_PAGE);
}
 else {
  Graphics2D g2d=(Graphics2D)g;
  g2d.translate(pageFormat.getImageableX(),pageFormat.getImageableY());
  disableDoubleBuffering(componentToBePrinted);
  componentToBePrinted.paint(g2d);
  enableDoubleBuffering(componentToBePrinted);
  return (PAGE_EXISTS);
}
", color="#ffffb3"];
  "Print>Object" -> "public-static-void-disableDoubleBuffering(Component)";
  "public-static-void-disableDoubleBuffering(Component)" [label="public-static-void-disableDoubleBuffering(Component)", color="#ffffb3"];
  "public-static-void-disableDoubleBuffering(Component)" -> "RepaintManager currentManager=RepaintManager.currentManager(c);
";
  "RepaintManager currentManager=RepaintManager.currentManager(c);
" [label="RepaintManager currentManager=RepaintManager.currentManager(c);
", color="#ffffb3"];
  "public-static-void-disableDoubleBuffering(Component)" -> "currentManager.setDoubleBufferingEnabled(false);
";
  "currentManager.setDoubleBufferingEnabled(false);
" [label="currentManager.setDoubleBufferingEnabled(false);
", color="#ffffb3"];
  "Print>Object" -> "public-static-void-enableDoubleBuffering(Component)";
  "public-static-void-enableDoubleBuffering(Component)" [label="public-static-void-enableDoubleBuffering(Component)", color="#ffffb3"];
  "public-static-void-enableDoubleBuffering(Component)" -> "RepaintManager currentManager=RepaintManager.currentManager(c);
";
  "RepaintManager currentManager=RepaintManager.currentManager(c);
" [label="RepaintManager currentManager=RepaintManager.currentManager(c);
", color="#ffffb3"];
  "public-static-void-enableDoubleBuffering(Component)" -> "currentManager.setDoubleBufferingEnabled(true);
";
  "currentManager.setDoubleBufferingEnabled(true);
" [label="currentManager.setDoubleBufferingEnabled(true);
", color="#ffffb3"];
  "Variant" -> "RedoAction>AbstractAction";
  "RedoAction>AbstractAction" [label="RedoAction>AbstractAction", color="#fccde5"];
  "RedoAction>AbstractAction" -> "serialVersionUID=1";
  "serialVersionUID=1" [label="serialVersionUID=1", color="#fccde5"];
  "RedoAction>AbstractAction" -> "notepad";
  "notepad" [label="notepad", color="#fccde5"];
  "RedoAction>AbstractAction" -> "public-RedoAction(Notepad)";
  "public-RedoAction(Notepad)" [label="public-RedoAction(Notepad)", color="#fccde5"];
  "public-RedoAction(Notepad)" -> "super(\"Redo\");
";
  "super(\"Redo\");
" [label="super(\"Redo\");
", color="#fccde5"];
  "public-RedoAction(Notepad)" -> "putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/redo.gif\")));
";
  "putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/redo.gif\")));
" [label="putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/redo.gif\")));
", color="#fccde5"];
  "public-RedoAction(Notepad)" -> "setEnabled(false);
";
  "setEnabled(false);
" [label="setEnabled(false);
", color="#fccde5"];
  "public-RedoAction(Notepad)" -> "this.notepad=notepad;
";
  "this.notepad=notepad;
" [label="this.notepad=notepad;
", color="#fccde5"];
  "RedoAction>AbstractAction" -> "public-void-actionPerformed(ActionEvent)";
  "public-void-actionPerformed(ActionEvent)" [label="public-void-actionPerformed(ActionEvent)", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "try {
  notepad.undo.redo();
}
 catch (CannotRedoException ex) {
  System.out.println(\"Unable to redo: \" + ex);
  ex.printStackTrace();
}
";
  "try {
  notepad.undo.redo();
}
 catch (CannotRedoException ex) {
  System.out.println(\"Unable to redo: \" + ex);
  ex.printStackTrace();
}
" [label="try {
  notepad.undo.redo();
}
 catch (CannotRedoException ex) {
  System.out.println(\"Unable to redo: \" + ex);
  ex.printStackTrace();
}
", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "update();
";
  "update();
" [label="update();
", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "notepad.undoAction.update();
";
  "notepad.undoAction.update();
" [label="notepad.undoAction.update();
", color="#fccde5"];
  "RedoAction>AbstractAction" -> "protected-void-update()";
  "protected-void-update()" [label="protected-void-update()", color="#fccde5"];
  "protected-void-update()" -> "if (notepad.undo.canRedo()) {
  setEnabled(true);
  putValue(\"Redo\",notepad.undo.getRedoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Redo\");
}
";
  "if (notepad.undo.canRedo()) {
  setEnabled(true);
  putValue(\"Redo\",notepad.undo.getRedoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Redo\");
}
" [label="if (notepad.undo.canRedo()) {
  setEnabled(true);
  putValue(\"Redo\",notepad.undo.getRedoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Redo\");
}
", color="#fccde5"];
  "Variant" -> "UndoAction>AbstractAction";
  "UndoAction>AbstractAction" [label="UndoAction>AbstractAction", color="#fccde5"];
  "UndoAction>AbstractAction" -> "serialVersionUID=1";
  "serialVersionUID=1" [label="serialVersionUID=1", color="#fccde5"];
  "UndoAction>AbstractAction" -> "notepad";
  "notepad" [label="notepad", color="#fccde5"];
  "UndoAction>AbstractAction" -> "public-UndoAction(Notepad)";
  "public-UndoAction(Notepad)" [label="public-UndoAction(Notepad)", color="#fccde5"];
  "public-UndoAction(Notepad)" -> "super(\"Undo\");
";
  "super(\"Undo\");
" [label="super(\"Undo\");
", color="#fccde5"];
  "public-UndoAction(Notepad)" -> "putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/undo.gif\")));
";
  "putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/undo.gif\")));
" [label="putValue(Action.SMALL_ICON,new ImageIcon(this.getClass().getResource(\"images/undo.gif\")));
", color="#fccde5"];
  "public-UndoAction(Notepad)" -> "setEnabled(false);
";
  "setEnabled(false);
" [label="setEnabled(false);
", color="#fccde5"];
  "public-UndoAction(Notepad)" -> "this.notepad=notepad;
";
  "this.notepad=notepad;
" [label="this.notepad=notepad;
", color="#fccde5"];
  "UndoAction>AbstractAction" -> "public-void-actionPerformed(ActionEvent)";
  "public-void-actionPerformed(ActionEvent)" [label="public-void-actionPerformed(ActionEvent)", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "try {
  notepad.undo.undo();
}
 catch (CannotUndoException ex) {
  System.out.println(\"Unable to undo: \" + ex);
  ex.printStackTrace();
}
";
  "try {
  notepad.undo.undo();
}
 catch (CannotUndoException ex) {
  System.out.println(\"Unable to undo: \" + ex);
  ex.printStackTrace();
}
" [label="try {
  notepad.undo.undo();
}
 catch (CannotUndoException ex) {
  System.out.println(\"Unable to undo: \" + ex);
  ex.printStackTrace();
}
", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "update();
";
  "update();
" [label="update();
", color="#fccde5"];
  "public-void-actionPerformed(ActionEvent)" -> "notepad.redoAction.update();
";
  "notepad.redoAction.update();
" [label="notepad.redoAction.update();
", color="#fccde5"];
  "UndoAction>AbstractAction" -> "protected-void-update()";
  "protected-void-update()" [label="protected-void-update()", color="#fccde5"];
  "protected-void-update()" -> "if (notepad.undo.canUndo()) {
  setEnabled(true);
  putValue(\"Undo\",notepad.undo.getUndoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Undo\");
}
";
  "if (notepad.undo.canUndo()) {
  setEnabled(true);
  putValue(\"Undo\",notepad.undo.getUndoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Undo\");
}
" [label="if (notepad.undo.canUndo()) {
  setEnabled(true);
  putValue(\"Undo\",notepad.undo.getUndoPresentationName());
}
 else {
  setEnabled(false);
  putValue(Action.NAME,\"Undo\");
}
", color="#fccde5"];
}