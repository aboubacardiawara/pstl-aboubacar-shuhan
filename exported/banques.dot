digraph RUAST {
  node [shape=box];
  "Variant" [label="Variant", color="#ffffb3"];
  "Variant" -> "Account>Object";
  "Account>Object" [label="Account>Object", color="#ffffb3"];
  "Account>Object" -> "id";
  "id" [label="id", color="#ffffb3"];
  "Account>Object" -> "balance";
  "balance" [label="balance", color="#ffffb3"];
  "Account>Object" -> "public-Account(String,double)";
  "public-Account(String,double)" [label="public-Account(String,double)", color="#ffffb3"];
  "public-Account(String,double)" -> "id=i;
";
  "id=i;
" [label="id=i;
", color="#ffffb3"];
  "public-Account(String,double)" -> "balance=m;
";
  "balance=m;
" [label="balance=m;
", color="#ffffb3"];
  "Account>Object" -> "public-void-deposit(double)";
  "public-void-deposit(double)" [label="public-void-deposit(double)", color="#ffffb3"];
  "public-void-deposit(double)" -> "this.balance+=amount;
";
  "this.balance+=amount;
" [label="this.balance+=amount;
", color="#ffffb3"];
  "Account>Object" -> "public-double-getAmount()";
  "public-double-getAmount()" [label="public-double-getAmount()", color="#ffffb3"];
  "public-double-getAmount()" -> "return balance;
";
  "return balance;
" [label="return balance;
", color="#ffffb3"];
  "Account>Object" -> "public-void-withdraw(double)";
  "public-void-withdraw(double)" [label="public-void-withdraw(double)", color="#ffffb3"];
  "public-void-withdraw(double)" -> "if (amount <= balance) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
";
  "if (amount <= balance) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
" [label="if (amount <= balance) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
", color="#bebada"];
  "public-void-withdraw(double)" -> "if (amount <= balance + limit) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
";
  "if (amount <= balance + limit) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
" [label="if (amount <= balance + limit) {
  balance-=amount;
}
 else {
  System.out.println(\"Insuffisent balance..!!\");
}
", color="#fb8072"];
  "Account>Object" -> "limit";
  "limit" [label="limit", color="#fb8072"];
  "Account>Object" -> "public-double-getLimit()";
  "public-double-getLimit()" [label="public-double-getLimit()", color="#fb8072"];
  "public-double-getLimit()" -> "return limit;
";
  "return limit;
" [label="return limit;
", color="#fb8072"];
  "Account>Object" -> "currency";
  "currency" [label="currency", color="#80b1d3"];
  "Account>Object" -> "public-int-getCurrency()";
  "public-int-getCurrency()" [label="public-int-getCurrency()", color="#80b1d3"];
  "public-int-getCurrency()" -> "return currency;
";
  "return currency;
" [label="return currency;
", color="#80b1d3"];
  "Variant" -> "Bank>Object";
  "Bank>Object" [label="Bank>Object", color="#ffffb3"];
  "Bank>Object" -> "accounts";
  "accounts" [label="accounts", color="#ffffb3"];
  "Bank>Object" -> "public-void-depisitOnAccount(String,double)";
  "public-void-depisitOnAccount(String,double)" [label="public-void-depisitOnAccount(String,double)", color="#ffffb3"];
  "public-void-depisitOnAccount(String,double)" -> "if (accounts.containsKey(id)) {
  accounts.get(id).deposit(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
";
  "if (accounts.containsKey(id)) {
  accounts.get(id).deposit(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
" [label="if (accounts.containsKey(id)) {
  accounts.get(id).deposit(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
", color="#ffffb3"];
  "Bank>Object" -> "public-void-withdrawfromAccount(String,double)";
  "public-void-withdrawfromAccount(String,double)" [label="public-void-withdrawfromAccount(String,double)", color="#ffffb3"];
  "public-void-withdrawfromAccount(String,double)" -> "if (accounts.containsKey(id)) {
  accounts.get(id).withdraw(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
";
  "if (accounts.containsKey(id)) {
  accounts.get(id).withdraw(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
" [label="if (accounts.containsKey(id)) {
  accounts.get(id).withdraw(amount);
}
 else {
  System.out.println(\"The account does not exist!\");
}
", color="#ffffb3"];
  "Bank>Object" -> "public-void-display()";
  "public-void-display()" [label="public-void-display()", color="#ffffb3"];
  "public-void-display()" -> "System.out.println(\"Bank\");
";
  "System.out.println(\"Bank\");
" [label="System.out.println(\"Bank\");
", color="#ffffb3"];
  "Bank>Object" -> "converter";
  "converter" [label="converter", color="#80b1d3"];
  "Bank>Object" -> "public-Bank(Converter)";
  "public-Bank(Converter)" [label="public-Bank(Converter)", color="#80b1d3"];
  "public-Bank(Converter)" -> "this.converter=c;
";
  "this.converter=c;
" [label="this.converter=c;
", color="#80b1d3"];
  "Bank>Object" -> "public-double-convert(int,int,double)";
  "public-double-convert(int,int,double)" [label="public-double-convert(int,int,double)", color="#80b1d3"];
  "public-double-convert(int,int,double)" -> "return converter.conv(curSource,curTarget,amount);
";
  "return converter.conv(curSource,curTarget,amount);
" [label="return converter.conv(curSource,curTarget,amount);
", color="#80b1d3"];
  "Variant" -> "Client>Object";
  "Client>Object" [label="Client>Object", color="#ffffb3"];
  "Client>Object" -> "name";
  "name" [label="name", color="#ffffb3"];
  "Client>Object" -> "id";
  "id" [label="id", color="#ffffb3"];
  "Variant" -> "Converter>Object";
  "Converter>Object" [label="Converter>Object", color="#80b1d3"];
  "Converter>Object" -> "public-double-conv(int,int,double)";
  "public-double-conv(int,int,double)" [label="public-double-conv(int,int,double)", color="#80b1d3"];
  "public-double-conv(int,int,double)" -> "System.out.println(\"Conversion donbe..\");
";
  "System.out.println(\"Conversion donbe..\");
" [label="System.out.println(\"Conversion donbe..\");
", color="#80b1d3"];
  "public-double-conv(int,int,double)" -> "return 123;
";
  "return 123;
" [label="return 123;
", color="#80b1d3"];
}